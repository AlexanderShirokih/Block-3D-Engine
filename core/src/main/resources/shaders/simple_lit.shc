name: "Simple/Lit"
properties:
  "projectionMatrix":
    type: "Matrix4"
    uniformName: "projectionMatrix"
  "modelViewMatrix":
    type: "Matrix4"
    uniformName: "modelViewMatrix"
  "mainTexture":
    type: "Texture2D"
    uniformName: "mainTexture"
  "specularColor":
    type: "ColorRGB"
    uniformName: "specularColor"
  "ambientColor":
    type: "ColorRGB"
    uniformName: "ambientColor"
  "reflectance":
    type: "Float"
    uniformName: "reflectance"
  "lightSource":
    type: "LightSource"
    uniformName: "lightSource"

programs:
  "OpenGL30":
    vertexShaderCode: |
      #version 330
      layout (location=0) in vec3 position;
      layout (location=1) in vec3 normal;
      layout (location=2) in vec2 texCoord;

      out vec2 outTexCoord;
      out vec3 mvNormal;
      out vec3 mvVertex;

      uniform mat4 projectionMatrix;
      uniform mat4 modelViewMatrix;

      void main() {
        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);
        gl_Position = projectionMatrix * modelViewPosition;
        outTexCoord = texCoord;

        mvVertex = modelViewPosition.xyz;
        mvNormal = normalize(modelViewMatrix * vec4(normal, 0.0)).xyz;
      }

    fragmentShaderCode: |
      #version 330

      struct LightSource
      {
          float intensity;
          float attenuation;
          float cutoff;
          vec3 color;
          vec3 vmPosition;
      };

      in vec2 outTexCoord;
      in vec3 mvNormal;
      in vec3 mvVertex;
      out vec4 fragColor;

      uniform sampler2D mainTexture;
      uniform vec3 specularColor;
      uniform vec3 ambientColor;
      uniform float reflectance;
      uniform LightSource lightSource;

      vec4 blinnPhongLight(LightSource light, vec3 position, vec3 normal)
      {
        vec3 N = normalize(normal);
        vec3 L = normalize(light.vmPosition - position);

        float diffLambertian = max(dot(N, L), 0.05);

        vec3 color = light.color;
        vec4 diffuse = diffLambertian * vec4(color, 1.0);

        vec3 viewDir = normalize(-position);
        vec3 reflectedLight = normalize(reflect(-L, N));

        float specLambertian = max(dot(viewDir, reflectedLight), 0.0);
        vec3 specular = pow(specLambertian, reflectance) * specularColor;

        if(light.attenuation > 0.0) {
            float distance = length(L);
            float attenuationInv = 1.0 + light.attenuation * distance * distance;
            return (diffuse + vec4((ambientColor + specular), 1.0)) / attenuationInv;
          }
        else
            return (diffuse + vec4(ambientColor + specular, 1.0));
      }

      void main() {
        vec4 base = texture(mainTexture, outTexCoord);
        vec4 lightColor = blinnPhongLight(lightSource, mvVertex, mvNormal);

        fragColor = base * lightColor;
      }